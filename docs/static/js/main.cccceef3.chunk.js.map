{"version":3,"sources":["utils/GameMetricsCollector.ts","components/ClueVault.tsx","components/EndOfGame.tsx","components/GameHelp.tsx","components/GameProgress.tsx","components/CountDown.tsx","atoms/Button.tsx","components/GameStageView.tsx","components/MetricsReport.tsx","components/GameView.tsx","utils/persistance.ts","data/stages.ts","data/game.ts","utils/decrypt.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["GameMetricsCollector","startStage","_metrics","_currentStage","this","storedMetrics","localStorage","getItem","METRIC_STORAGE_ITEM_NAME","stageMetrics","JSON","parse","atob","loadMetrics","attempts","persistMetrics","logAttempt","solutionTime","Date","stageNumber","metrics","setItem","btoa","stringify","ClueVault","clues","useDisclosure","isOpen","onOpen","onClose","length","fontSize","variant","aria-label","icon","onClick","ReactGA","event","category","action","ClueVaultModal","spacing","map","clue","size","bgColor","colorScheme","mr","EndOfGame","GameHelp","Info","GameHelpModal","GameProgress","fontWeight","textDecor","textTransform","Countdown","date","children","Button","color","rounded","GameStageView","stage","onStageCompleted","metricsCollector","startDate","UnlockedStageView","useState","stageComplete","setStageComplete","onCorrectAnswer","StageQuestionView","submittedAnswer","setSubmittedAnswer","toast","useToast","validateAnswer","answer","logSolution","title","status","duration","isClosable","label","maxW","defaultIndex","orientation","allowToggle","textAlign","border","outline","flex","pb","question","tips","tip","w","borderColor","onChange","target","value","onKeyUp","key","EndOfStageView","MetricsReport","MetricsReportModal","index","StageMetricsReport","mb","toLocaleString","GameView","game","gameState","setGameState","useEffect","previousGameState","storedState","loadGameState","currentStage","hasNextStage","stages","minH","p","justifySelf","isInline","slice","state","newState","window","location","encryptedStage","App","initialize","pageview","pathname","search","theme","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cccceef3.chunk.js","sourcesContent":["export interface StageMetrics {\n    attempts: number;\n    solutionTime?: Date;\n}\n\nexport interface GameMetrics {\n    stageMetrics: StageMetrics[]\n}\n\nexport class GameMetricsCollector {\n\n    private _metrics: GameMetrics;\n    private _currentStage: number = 0;\n\n    constructor(startStage: number) {\n        this._metrics = loadMetrics();\n        this._currentStage = startStage;\n    }\n\n    set currentStage(stageNumber: number) {\n        this._currentStage = stageNumber;\n    }\n\n    logAttempt(): void {\n        if (!this._metrics.stageMetrics[this._currentStage]) {\n            this._metrics.stageMetrics[this._currentStage] = { attempts: 0 }\n        }\n        this._metrics.stageMetrics[this._currentStage] = { attempts: this._metrics.stageMetrics[this._currentStage].attempts + 1 };\n        persistMetrics(this._metrics);\n    }\n\n    logSolution(): void {\n        this.logAttempt();\n        this._metrics.stageMetrics[this._currentStage].solutionTime = new Date();\n        persistMetrics(this._metrics);\n        this._currentStage += 1;\n    }\n\n    get metrics(): GameMetrics {\n        return this._metrics;\n    }\n}\n\nconst METRIC_STORAGE_ITEM_NAME = \"metrics\";\n\nfunction loadMetrics(): GameMetrics {\n    const storedMetrics = localStorage.getItem(METRIC_STORAGE_ITEM_NAME);\n\n    if (!storedMetrics) {\n        return { stageMetrics: [] };\n    }\n\n    return JSON.parse(atob(storedMetrics));\n}\n\nfunction persistMetrics(metrics: GameMetrics): void {\n    localStorage.setItem(METRIC_STORAGE_ITEM_NAME, btoa(JSON.stringify(metrics)));\n}","import { Button, HStack, IconButton, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Tag, useDisclosure } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { FaArchive } from \"react-icons/fa\";\nimport ReactGA from 'react-ga';\n\ninterface ClueVaultProps {\n    clues: string[];\n}\n\nexport const ClueVault = ({ clues }: ClueVaultProps) => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    return (\n        <>\n            {clues.length > 0 && <IconButton\n                fontSize=\"xl\"\n                variant=\"ghost\"\n                aria-label=\"Open vault\"\n                icon={< FaArchive />}\n                onClick={() => {\n                    ReactGA.event({\n                        category: 'Game',\n                        action: 'Open vault',\n                    });\n                    onOpen();\n                }}\n            />}\n            <ClueVaultModal clues={clues} isOpen={isOpen} onClose={onClose} />\n        </>\n    );\n}\n\ninterface ClueVaultModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    clues: string[];\n}\n\nconst ClueVaultModal = ({ isOpen, onClose, clues }: ClueVaultModalProps) => {\n    return (\n\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Gevonden clues</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    <HStack spacing={2}>\n                        {clues.map(clue => <Tag size=\"lg\" key={clue} bgColor=\"green.400\">{clue}</Tag>)}\n                    </HStack>\n                </ModalBody>\n                <ModalFooter>\n                    <Button colorScheme=\"green\" mr={3} onClick={onClose}>\n                        Sluiten\n                        </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}","import { Text } from \"@chakra-ui/react\"\nimport React from \"react\"\n\nexport const EndOfGame = () => {\n    return <Text fontSize={25}>Je hebt alle clues bemachtigd. Breng deze info samen met je rapport mee naar de debrief.</Text>\n}","import { Button, IconButton, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure } from \"@chakra-ui/react\";\nimport { InfoIcon } from '@chakra-ui/icons'\nimport React from \"react\";\n\nexport const GameHelp = () => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    return (\n        <>\n            <IconButton  fontSize=\"xl\" variant=\"ghost\" aria-label=\"Get help\" icon={< InfoIcon />} onClick={onOpen} />\n            <GameHelpModal isOpen={isOpen} onClose={onClose} />\n        </>\n    );\n}\n\ninterface GameHelpModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nconst GameHelpModal = ({ isOpen, onClose }: GameHelpModalProps) => {\n    return (\n\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Info</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    Om het spel efficient te spelen is het aangeraden om deze website steeds te openen met dezelfde browser op hetzelfde toestel. Mocht er technisch iets mis zijn mag je altijd contact opnemen met Sam.\n          </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"green\" mr={3} onClick={onClose}>\n                        Sluiten\n                        </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}","import { Text } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ninterface GameProgressProps {\n    stageNumber: number;\n}\n\nexport const GameProgress = ({ stageNumber }: GameProgressProps) => (\n    <Text fontSize={20} fontWeight=\"bold\" textDecor=\"underline\" textTransform=\"uppercase\">{`Deel ${stageNumber}`}</Text>\n);","import React from \"react\"\nimport CountdownDependency from \"react-countdown\"\nimport { Box } from \"@chakra-ui/react\"\n\ninterface CountdownProps {\n    date: Date\n}\n\nconst Countdown: React.FC<CountdownProps> = ({ date, children }) => (\n    <Box fontSize=\"6xl\">\n        <CountdownDependency date={date} >\n            <div>{children}</div>\n        </CountdownDependency>\n    </Box >\n)\n\nexport default Countdown;","import { Button as ChakraButton } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { FC } from \"react\";\n\ninterface ButtonProps {\n    onClick: () => void;\n}\nexport const Button: FC<ButtonProps> = ({ onClick, children }) => (\n    <ChakraButton colorScheme=\"green\" color=\"gray.900\" onClick={onClick} rounded=\"0px\">\n        {children}\n    </ChakraButton>\n);","import React, { useState } from \"react\";\nimport Countdown from \"./CountDown\";\nimport { Stage } from \"../model/Stage\";\nimport { Accordion, AccordionButton, AccordionIcon, AccordionItem, AccordionPanel, Box, Input, Tag, Text, VStack } from \"@chakra-ui/react\"\nimport { useToast } from \"@chakra-ui/react\"\nimport { Button } from \"../atoms/Button\";\nimport { GameMetricsCollector } from \"../utils/GameMetricsCollector\";\nimport ReactGA from 'react-ga';\n\nexport interface GameStageViewProps {\n    stage: Stage\n    onStageCompleted: () => void\n}\nexport interface WithMetricsCollectorProps {\n    metricsCollector: GameMetricsCollector;\n}\n\nexport const GameStageView = ({ stage, onStageCompleted, metricsCollector }: GameStageViewProps & WithMetricsCollectorProps) => {\n    return <Countdown date={stage.startDate}>\n        <UnlockedStageView stage={stage} onStageCompleted={onStageCompleted} metricsCollector={metricsCollector} />\n    </Countdown>\n}\n\nconst UnlockedStageView = ({ stage, onStageCompleted, metricsCollector }: GameStageViewProps & WithMetricsCollectorProps) => {\n    const [stageComplete, setStageComplete] = useState(false);\n    return (\n        <Box>\n            { !stageComplete\n                ? <StageQuestionView stage={stage} onCorrectAnswer={() => { setStageComplete(true) }} metricsCollector={metricsCollector} />\n                : <EndOfStageView stage={stage} onStageCompleted={() => {\n                    setStageComplete(false);\n                    onStageCompleted();\n                }} />\n            }\n        </Box>\n    )\n};\n\ninterface StageQuestionViewProps extends WithMetricsCollectorProps {\n    stage: Stage;\n    onCorrectAnswer: () => void\n}\n\nconst StageQuestionView = ({ stage, onCorrectAnswer, metricsCollector }: StageQuestionViewProps) => {\n    const [submittedAnswer, setSubmittedAnswer] = useState(\"\");\n    const toast = useToast();\n    const validateAnswer = () => {\n        if (submittedAnswer === stage.answer) {\n            metricsCollector.logSolution();\n            toast({\n                title: \"Correct antwoord.\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true,\n            })\n            onCorrectAnswer();\n        } else {\n            metricsCollector.logAttempt();\n            toast({\n                title: \"Fout antwoord\",\n                status: \"error\",\n                duration: 3000,\n                isClosable: true,\n            });\n            ReactGA.event({\n                category: 'Game',\n                action: 'Bad answer',\n                label: submittedAnswer\n            });\n            ReactGA.event({\n                category: 'Game',\n                action: `BA [${submittedAnswer}]`,\n            });\n        }\n    }\n    return (\n        <VStack spacing={10} maxW=\"700px\">\n            <Accordion defaultIndex={0} orientation=\"vertical\" fontSize={18} allowToggle textAlign=\"left\" border=\"none\" outline=\"none\">\n                <AccordionItem border=\"none\">\n                    <AccordionButton>\n                        <Box flex=\"1\" textAlign=\"left\" fontSize={25}>\n                            Vraag\n                         </Box>\n                        <AccordionIcon />\n                    </AccordionButton>\n                    <AccordionPanel pb={4}>\n                        {stage.question}\n                    </AccordionPanel>\n                </AccordionItem>\n                <AccordionItem border=\"none\">\n                    <AccordionButton>\n                        <Box flex=\"1\" textAlign=\"left\" fontSize={25}>\n                            Tips\n                         </Box>\n                        <AccordionIcon />\n                    </AccordionButton>\n                    <AccordionPanel pb={4}>\n                        {\n                            stage.tips ?\n                                <ul>\n                                    {stage.tips.map(tip => <li key={tip}>{tip}</li>)}\n                                </ul>\n                                : \"Geen tips beschikbaar.\"}\n                    </AccordionPanel>\n                </AccordionItem>\n            </Accordion>\n            <VStack spacing={2} w=\"50%\">\n                <Input colorScheme=\"green\"borderColor=\"green.400\" rounded=\"0px\"\n                    onChange={({ target }) => {\n                        setSubmittedAnswer(target.value);\n                    }}\n                    onKeyUp={({ key }) => {\n                        if (key === \"Enter\") {\n                            validateAnswer();\n                        }\n                    }} />\n                <Button onClick={() => {\n                    validateAnswer();\n                }}>Antwoorden</Button>\n            </VStack>\n        </VStack>\n    );\n};\n\nconst EndOfStageView = ({ stage, onStageCompleted }: GameStageViewProps) => (\n    <VStack spacing={10}>\n        <VStack spacing={2}>\n            <Text fontSize={35}>{`Dit is jullie clue:`}</Text>\n            <Tag size=\"lg\" bgColor=\"green.400\">{stage.clue}</Tag>\n        </VStack>\n        <Button onClick={onStageCompleted}>Volgende uitdaging</Button>\n    </VStack>\n)","import { Text, Box, Button, Heading, IconButton, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { FaPoll } from \"react-icons/fa\";\nimport { GameMetrics, StageMetrics } from \"../utils/GameMetricsCollector\";\nimport ReactGA from 'react-ga';\n\ninterface MetricsReportProps {\n    metrics: GameMetrics;\n}\n\nexport const MetricsReport = ({ metrics }: MetricsReportProps) => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    return (\n        <>\n            <IconButton\n                fontSize=\"xl\"\n                variant=\"ghost\"\n                aria-label=\"Show game report\"\n                icon={< FaPoll />}\n                onClick={() => {\n                    ReactGA.event({\n                        category: 'Game',\n                        action: 'Open metrics',\n                    });\n                    onOpen();\n                }}\n            />\n            <MetricsReportModal metrics={metrics} isOpen={isOpen} onClose={onClose} />\n        </>\n    );\n}\n\ninterface MetricsReportModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    metrics: GameMetrics;\n}\n\nconst MetricsReportModal = ({ isOpen, onClose, metrics }: MetricsReportModalProps) => {\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Jouw rapport</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    {metrics.stageMetrics.length > 0\n                        ? <Box >\n                            {metrics.stageMetrics.map((value, index) => <StageMetricsReport key={index} metrics={value} stageNumber={index} />)}\n                        </Box>\n                        : <Text>Er is onvoldoende data beschikbaar</Text>\n                    }\n                </ModalBody>\n                <ModalFooter>\n                    <Button colorScheme=\"green\" mr={3} onClick={onClose}>\n                        Sluiten\n                        </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}\n\ninterface StageMetricsReportProps {\n    metrics: StageMetrics\n    stageNumber: number\n}\n\nconst StageMetricsReport = ({ metrics, stageNumber }: StageMetricsReportProps) => (\n    <Box textAlign=\"start\" mb={4}>\n        <Heading size=\"md\" mb={2}>{`Deel ${stageNumber + 1}`}</Heading>\n        <Text>{`Pogingen: ${metrics.attempts}`}</Text>\n        <Text> {metrics.solutionTime && `Geraden op: ${metrics.solutionTime.toLocaleString(\"Nl-be\")}`}</Text>\n    </Box>\n);","import { Box, Grid, HStack, Spinner, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Game } from \"../model/Game\";\nimport { GameState } from \"../model/GameState\";\nimport { GameMetricsCollector } from \"../utils/GameMetricsCollector\";\nimport { loadGameState, persistGameState } from \"../utils/persistance\";\nimport { ClueVault } from \"./ClueVault\";\nimport { EndOfGame } from \"./EndOfGame\";\nimport { GameHelp } from \"./GameHelp\";\nimport { GameProgress } from \"./GameProgress\";\nimport { GameStageView } from \"./GameStageView\";\nimport { MetricsReport } from \"./MetricsReport\";\nimport ReactGA from 'react-ga';\n\ninterface GameViewProps {\n    game: Game\n}\n\nexport const GameView = ({ game }: GameViewProps) => {\n    const [gameState, setGameState] = useState<GameState | undefined>();\n\n    const handleStageCompleted = () => {\n        if (!gameState) {\n            return;\n        }\n        ReactGA.event({\n            category: 'Game',\n            action: 'Completed stage',\n            value: gameState.currentStage\n        });\n        const newState = { currentStage: gameState.currentStage + 1 };\n        persistGameState(newState);\n        setGameState(newState);\n        window.location = window.location;\n    };\n\n    useEffect(() => {\n        let previousGameState = loadGameState();\n\n        if (!previousGameState) {\n            previousGameState = {\n                currentStage: 0\n            }\n        }\n        setGameState(previousGameState);\n    }, [])\n\n    if (!gameState) {\n        return <Spinner size=\"xl\" />\n    }\n\n    const metricsCollector = new GameMetricsCollector(gameState.currentStage);\n    const hasNextStage = gameState.currentStage < game.stages.length;\n    const currentStage = game.stages[gameState.currentStage];\n\n    return (\n        <Grid minH=\"100vh\" p={10}>\n            <Box justifySelf=\"end\" >\n                <HStack spacing={2} isInline>\n                    <ClueVault clues={game.stages.slice(0, gameState.currentStage).map(stage => stage.clue)} />\n                    <MetricsReport metrics={metricsCollector.metrics} />\n                    <GameHelp />\n                </HStack>\n            </Box>\n            {\n                hasNextStage\n                    ? <VStack spacing={8}>\n                        <GameProgress stageNumber={gameState.currentStage + 1} />\n                        <GameStageView stage={currentStage} onStageCompleted={handleStageCompleted} metricsCollector={metricsCollector} />\n                    </VStack>\n                    : <EndOfGame />\n            }\n        </Grid>\n    )\n}","import { GameState } from \"../model/GameState\";\n\nexport function loadGameState(): GameState | null {\n    const storedState = localStorage.getItem(\"state\");\n\n    if (!storedState) {\n        return null;\n    }\n\n    return JSON.parse(atob(storedState));\n}\n\nexport function persistGameState(state: GameState): void {\n    localStorage.setItem(\"state\", btoa(JSON.stringify(state)));\n}","import { Stage } from \"../model/Stage\";\n\nconst Stage1 = {\n    startDate: new Date(\"Nov 15, 2020 19:30:00\"),\n    question: \"V2F0IGlzIGhldCB2ZXJzY2hpbCBpbiBJU0JOIG51bW1lciB0dXNzZW4gaGV0IGVlcnN0ZSBib2VrIGVuIGRlIGx1aXN0ZXJib2VrIHZlcnNpZSB2YW4gaGV0IGxhYXRzdGUgYm9layB2YW4gbWlqbiBmYXZvcmlldGUgc2NocmlqdmVyPw==\",\n    answer: \"Nzc4NDUyODI2NA==\",\n    clue: \"V2hpdGU=\"\n};\n\nconst Stage2 = {\n    startDate: new Date(\"Nov 16, 2020 19:30:00\"),\n    question: \"SWsgemF0IHZhbmRhYWcgaW4gZWVuIGtsZWluIHBhcmtqZSwgZW4gaWsgd291IG5hYXIgZGUgc3RlcnJlbiBnYWFuIGtpamtlbi4gSWsgbmFtIGRlIHNuZWxzdGUgd2VnIG5hYXIgbWlqbiB2ZXJ2b2Vyc21pZGRlbCwgZW4gc3Bvb3JkZSBlcm5hYXJ0b2UuIEhvZXZlZWwgbW9tZW50amVzIGR1dXJkZSBtaWpuIHJlaXMsIGFscyBqZSB3ZWV0IGRhdCBpayBvbSAxNy40OSBuYWFyIGRlIHN0ZXJyZW4ga2Vlaz8=\",\n    answer: \"MzEuMzM=\",\n    clue: \"aXM=\",\n    tips: [\"Alle berekeningen werden gedaan met Google Maps.\", \"Antwoord tot op 2 cijfers na de komma.\"]\n};\n\nconst Stage3 = {\n    startDate: new Date(\"Nov 17, 2020 19:30:00\"),\n    question: \"SWsgc3RhIG9wIGVlbiBkdWl2ZWxzZSBicnVnIG1ldCBkcmFrZW5ob29mZC4gSWsgYmVuIGdvZWQgdm9vcmJlcmVpZCBlbiByZWlzIG1ldCBtaWpuIHNjb290ZXIgb20gdGUgZ2FhbiBiaWRkZW4gYmlqIG1pam4gem9vbi4gRGFuIGdhIGlrIGxhbmdzIGJpaiBtaWpuIHZyb3V3ZW4sIGVuIGJpZGRlbiB3ZSBzYW1lbi4gSWsgZWluZGlnIG1pam4gZGFnIG1ldCAyMDAgZ2xpbWxhY2hlbi4gSG9ldmVlbCBrZWVyIG1vZXQgaWsgZGllIGRhZyB0YW5rZW4sIGFscyBqZSB3ZWV0IGRhdCBpayAxIGxpdGVyIGJlbnppbmUgb3AgMzUga2lsb21ldGVyIHZlcmJydWlrLiBJbiBtaWpuIHRhbmsga2FuIDYsNSBsaXRlci4=\",\n    answer: \"Mi43MA==\",\n    clue: \"TG9jYXRpZQ==\",\n    tips: [\"Alle berekeningen werden gedaan met Google Maps.\", \"Antwoord tot op 2 cijfers na de komma.\"]\n};\n\nconst Stage4 = {\n    startDate: new Date(\"Nov 18, 2020 19:30:00\"),\n    question: \"V2F0IGlzIGhldCBiZXN0ZSBiaWVyPw==\",\n    answer: \"U3RlbGxh\",\n    clue: \"SG91c2U=\"\n};\n\nexport const encryptedStages: Stage[] = [Stage1, Stage2, Stage3, Stage4];\n","import { Game } from \"../model/Game\";\nimport { decryptStage } from \"../utils/decrypt\";\nimport { encryptedStages } from \"./stages\";\n\nexport const game: Game = {\n    stages: encryptedStages.map(stage => decryptStage(stage))\n}","import { Stage } from \"../model/Stage\";\n\nexport function decryptStage(encryptedStage: Stage): Stage {\n    return {\n        ...encryptedStage,\n        startDate: encryptedStage.startDate,\n        question: atob(encryptedStage.question),\n        answer: atob(encryptedStage.answer),\n        clue: atob(encryptedStage.clue)\n    }\n}","import * as React from \"react\"\nimport {\n  ChakraProvider,\n  Box,\n  theme,\n} from \"@chakra-ui/react\"\nimport { GameView } from \"./components/GameView\"\nimport { game } from \"./data/game\"\nimport ReactGA from 'react-ga';\n\nexport const App = () => {\n  ReactGA.initialize('UA-183092537-1');\n  ReactGA.pageview(window.location.pathname + window.location.search);\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" background=\"gray.900\" color=\"green.400\">\n        <GameView game={game} />\n      </Box>\n    </ChakraProvider>\n  );\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}